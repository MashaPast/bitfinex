2020-03-06 17:09:00,122 module 'selector_events' function '__init__' DEBUG -> Using selector: EpollSelector
2020-03-06 17:09:00,125 module 'conftest' function 'connection_fixture' DEBUG -> Start connection
2020-03-06 17:09:00,162 module 'protocol' function '__init__' DEBUG -> client - state = CONNECTING
2020-03-06 17:09:00,228 module 'protocol' function 'connection_made' DEBUG -> client - event = connection_made(<asyncio.sslproto._SSLProtocolTransport object at 0x7f61602ab518>)
2020-03-06 17:09:00,229 module 'client' function 'write_http_request' DEBUG -> client > GET /ws/2 HTTP/1.1
2020-03-06 17:09:00,229 module 'client' function 'write_http_request' DEBUG -> client > Headers([('Host', 'api-pub.bitfinex.com'), ('Upgrade', 'websocket'), ('Connection', 'Upgrade'), ('Sec-WebSocket-Key', 'jMfNV+azpIU/F18GfA4rzA=='), ('Sec-WebSocket-Version', '13'), ('Sec-WebSocket-Extensions', 'permessage-deflate; client_max_window_bits'), ('User-Agent', 'Python/3.6 websockets/8.1')])
2020-03-06 17:09:00,442 module 'protocol' function 'data_received' DEBUG -> client - event = data_received(<758 bytes>)
2020-03-06 17:09:00,443 module 'client' function 'read_http_response' DEBUG -> client < HTTP/1.1 101 Switching Protocols
2020-03-06 17:09:00,444 module 'client' function 'read_http_response' DEBUG -> client < Headers([('Date', 'Fri, 06 Mar 2020 15:09:00 GMT'), ('Connection', 'upgrade'), ('Set-Cookie', '__cfduid=d271f1b48137991aa9693f0d0656a98ac1583507340; expires=Sun, 05-Apr-20 15:09:00 GMT; path=/; domain=.bitfinex.com; HttpOnly; SameSite=Lax'), ('Upgrade', 'websocket'), ('Sec-WebSocket-Accept', '94zlqBVYJgnxRYEWKRmvygGCcx4='), ('X-Frame-Options', 'sameorigin'), ('X-XSS-Protection', '1; mode=block'), ('Referrer-Policy', 'same-origin'), ('X-Download-Options', 'noopen'), ('X-Content-Type-Options', 'nosniff'), ('X-Permitted-Cross-Domain-Policies', 'none'), ('Strict-Transport-Security', 'max-age=31536000; includeSubdomains;'), ('CF-Cache-Status', 'DYNAMIC'), ('Expect-CT', 'max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"'), ('Server', 'cloudflare'), ('CF-RAY', '56fcfecc9f08fe40-HEL')])
2020-03-06 17:09:00,444 module 'protocol' function 'connection_open' DEBUG -> client - state = OPEN
2020-03-06 17:09:00,445 module 'protocol' function 'data_received' DEBUG -> client - event = data_received(<104 bytes>)
2020-03-06 17:09:00,445 module 'protocol' function 'read_frame' DEBUG -> client < Frame(fin=True, opcode=1, data=b'{"event":"info","version":2,"serverId":"a7a3bdfd-543c-47a9-9f92-1aaa699d8de8","platform":{"status":1}}', rsv1=False, rsv2=False, rsv3=False)
2020-03-06 17:09:00,448 module 'test_raw_books' function 'test_subscribe_to_action' DEBUG -> Subscribing to server
2020-03-06 17:09:00,449 module 'protocol' function 'write_frame' DEBUG -> client > Frame(fin=True, opcode=1, data=b'{ "event": "subscribe", "channel": "book", "prec": "R0", "symbol": "tAIDBTC"}', rsv1=False, rsv2=False, rsv3=False)
2020-03-06 17:09:02,388 module 'protocol' function 'data_received' DEBUG -> client - event = data_received(<140 bytes>)
2020-03-06 17:09:02,388 module 'protocol' function 'read_frame' DEBUG -> client < Frame(fin=True, opcode=1, data=b'{"event":"subscribed","channel":"book","chanId":147287,"symbol":"tAIDBTC","prec":"R0","freq":"F0","len":"25","pair":"AIDBTC"}', rsv1=False, rsv2=False, rsv3=False)
2020-03-06 17:09:02,389 module 'protocol' function 'read_frame' DEBUG -> client < Frame(fin=True, opcode=1, data=b'[147287,[]]', rsv1=False, rsv2=False, rsv3=False)
2020-03-06 17:09:02,393 module 'protocol' function 'write_close_frame' DEBUG -> client - state = CLOSING
2020-03-06 17:09:02,393 module 'protocol' function 'write_frame' DEBUG -> client > Frame(fin=True, opcode=8, data=b'\x03\xe8', rsv1=False, rsv2=False, rsv3=False)
2020-03-06 17:09:02,482 module 'protocol' function 'data_received' DEBUG -> client - event = data_received(<4 bytes>)
2020-03-06 17:09:02,483 module 'protocol' function 'read_frame' DEBUG -> client < Frame(fin=True, opcode=8, data=b'\x03\xe8', rsv1=False, rsv2=False, rsv3=False)
2020-03-06 17:09:02,483 module 'protocol' function 'eof_received' DEBUG -> client - event = eof_received()
2020-03-06 17:09:02,484 module 'protocol' function 'connection_lost' DEBUG -> client - event = connection_lost(None)
2020-03-06 17:09:02,484 module 'protocol' function 'connection_lost' DEBUG -> client - state = CLOSED
2020-03-06 17:09:02,484 module 'protocol' function 'connection_lost' DEBUG -> client x code = 1000, reason = [no reason]
2020-03-06 17:09:02,485 module 'protocol' function 'close_connection' DEBUG -> client x closing TCP connection
